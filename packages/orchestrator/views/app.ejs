<!DOCTYPE html>
<html lang="fr" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Skeleton OSS</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            /* Dark Theme */
            --bg-primary: #0a0a0a;
            --bg-secondary: #1a1a1a;
            --bg-tertiary: #262626;
            --bg-card: #1e1e1e;
            --bg-hover: #2a2a2a;
            --accent-primary: #3b82f6;
            --accent-secondary: #8b5cf6;
            --accent-success: #10b981;
            --accent-warning: #f59e0b;
            --accent-danger: #ef4444;
            --text-primary: #ffffff;
            --text-secondary: #a1a1aa;
            --text-muted: #71717a;
            --border-color: #404040;
            --gradient-primary: linear-gradient(135deg, #3b82f6, #8b5cf6);
            --gradient-secondary: linear-gradient(135deg, #10b981, #3b82f6);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: var(--bg-secondary);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 18px;
            font-weight: 700;
            color: var(--text-primary);
        }

        .logo-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 8px;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-success);
        }

        /* Navigation */
        .nav-menu {
            flex: 1;
            padding: 20px 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 20px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-size: 14px;
        }

        .nav-item:hover {
            background: var(--bg-hover);
            color: var(--text-primary);
        }

        .nav-item.active {
            background: var(--bg-hover);
            color: var(--accent-primary);
        }

        .nav-icon {
            width: 18px;
            text-align: center;
        }

        .nav-badge {
            margin-left: auto;
            background: var(--accent-primary);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--bg-primary);
        }

        .top-bar {
            height: 60px;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
        }

        .page-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
        }

        /* Chat Interface */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: calc(100vh - 60px);
        }

        .messages-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .message {
            max-width: 80%;
            animation: messageSlide 0.3s ease;
        }

        .message.user {
            align-self: flex-end;
        }

        .message.assistant {
            align-self: flex-start;
        }

        .message-content {
            padding: 16px 20px;
            border-radius: 18px;
            line-height: 1.5;
        }

        .message.user .message-content {
            background: var(--accent-primary);
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message.assistant .message-content {
            background: var(--bg-card);
            color: var(--text-primary);
            border-bottom-left-radius: 6px;
        }

        /* Input Area */
        .input-area {
            padding: 20px;
            background: var(--bg-secondary);
            border-top: 1px solid var(--border-color);
        }

        .input-container {
            position: relative;
            max-width: 800px;
            margin: 0 auto;
        }

        .model-selector {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }

        .model-label {
            font-size: 14px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        .model-select {
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background: var(--bg-tertiary);
            color: var(--text-primary);
            font-size: 14px;
            outline: none;
        }

        .message-input {
            width: 100%;
            min-height: 50px;
            max-height: 120px;
            padding: 15px 50px 15px 15px;
            border: 1px solid var(--border-color);
            border-radius: 25px;
            background: var(--bg-tertiary);
            color: var(--text-primary);
            font-size: 14px;
            font-family: inherit;
            resize: none;
            outline: none;
            transition: all 0.2s ease;
        }

        .message-input:focus {
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .send-btn {
            position: absolute;
            right: 8px;
            bottom: 8px;
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 50%;
            background: var(--accent-primary);
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-btn:hover:not(:disabled) {
            background: var(--accent-secondary);
            transform: scale(1.1);
        }

        .send-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Typing indicator */
        .typing-indicator {
            display: none;
            align-items: center;
            gap: 8px;
            padding: 16px 20px;
            margin: 8px 0;
            color: var(--text-secondary);
            font-style: italic;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-primary);
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1.2); opacity: 1; }
        }

        /* Welcome Screen */
        .welcome-screen {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            text-align: center;
            padding: 40px;
        }

        .welcome-icon {
            width: 80px;
            height: 80px;
            border-radius: 20px;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 32px;
            margin-bottom: 24px;
        }

        .welcome-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 12px;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .welcome-subtitle {
            font-size: 16px;
            color: var(--text-secondary);
            margin-bottom: 32px;
            max-width: 480px;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            max-width: 600px;
            width: 100%;
        }

        .quick-action {
            padding: 20px;
            border-radius: 12px;
            background: var(--bg-card);
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: left;
        }

        .quick-action:hover {
            background: var(--bg-hover);
            border-color: var(--accent-primary);
            transform: translateY(-2px);
        }

        .quick-action-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            background: var(--gradient-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            margin-bottom: 12px;
            font-size: 18px;
        }

        .quick-action-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 6px;
            color: var(--text-primary);
        }

        .quick-action-desc {
            font-size: 13px;
            color: var(--text-secondary);
            line-height: 1.4;
        }

        /* Content Pages */
        .content-page {
            display: none;
            padding: 20px;
            height: calc(100vh - 60px);
            overflow-y: auto;
        }

        .content-page.active {
            display: block;
        }

        .feature-placeholder {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-secondary);
        }

        /* Cards Layout */
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px 0;
            max-width: 1200px;
        }

        .info-card {
            background: var(--bg-card);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 24px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .info-card:hover {
            border-color: var(--accent-primary);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .card-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
        }

        .card-icon {
            width: 48px;
            height: 48px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .card-icon.model { background: linear-gradient(135deg, #3b82f6, #8b5cf6); }
        .card-icon.integration { background: linear-gradient(135deg, #10b981, #059669); }
        .card-icon.workflow { background: linear-gradient(135deg, #f59e0b, #d97706); }
        .card-icon.analytics { background: linear-gradient(135deg, #ef4444, #dc2626); }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }

        .card-subtitle {
            font-size: 14px;
            color: var(--text-secondary);
            margin: 4px 0 0 0;
        }

        .card-content {
            color: var(--text-secondary);
            line-height: 1.6;
        }

        .model-status {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            margin-top: 8px;
        }

        .status-active {
            background: rgba(16, 185, 129, 0.1);
            color: var(--accent-success);
        }

        .status-demo {
            background: rgba(245, 158, 11, 0.1);
            color: var(--accent-warning);
        }

        .status-inactive {
            background: rgba(239, 68, 68, 0.1);
            color: var(--accent-danger);
        }

        .status-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
        }

        .status-active .status-dot { background: var(--accent-success); }
        .status-demo .status-dot { background: var(--accent-warning); }
        .status-inactive .status-dot { background: var(--accent-danger); }

        .metric-value {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-primary);
            margin: 8px 0 4px 0;
        }

        .metric-label {
            font-size: 14px;
            color: var(--text-secondary);
        }

        .workflow-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .workflow-item:last-child {
            border-bottom: none;
        }

        .workflow-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-success);
        }

        .page-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .page-header h2 {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 8px;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .page-header p {
            font-size: 16px;
            color: var(--text-secondary);
        }

        /* Animations */
        @keyframes messageSlide {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: scale(1); }
            to { opacity: 0; transform: scale(0.95); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 260px;
                transform: translateX(-100%);
                position: fixed;
                height: 100vh;
                z-index: 1000;
            }

            .sidebar.mobile-open {
                transform: translateX(0);
            }

            .main-content {
                width: 100%;
            }

            .message {
                max-width: 95%;
            }
        }
    </style>
</head>

<body>
    <div class="app-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <span>Agent Skeleton</span>
                </div>
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span>En ligne</span>
                </div>
            </div>

            <nav class="nav-menu">
                <button class="nav-item active" data-page="chat">
                    <i class="nav-icon fas fa-comments"></i>
                    <span>Chat</span>
                    <span class="nav-badge">Principal</span>
                </button>
                
                <button class="nav-item" data-page="models">
                    <i class="nav-icon fas fa-brain"></i>
                    <span>Modèles IA</span>
                    <span class="nav-badge">4</span>
                </button>
                
                <button class="nav-item" data-page="instructions">
                    <i class="nav-icon fas fa-book"></i>
                    <span>Instructions</span>
                </button>
                
                <button class="nav-item" data-page="integrations">
                    <i class="nav-icon fas fa-plug"></i>
                    <span>Intégrations</span>
                </button>
                
                <button class="nav-item" data-page="workflows">
                    <i class="nav-icon fas fa-project-diagram"></i>
                    <span>Workflows n8n</span>
                    <span class="nav-badge">3</span>
                </button>
                
                <button class="nav-item" data-page="analytics">
                    <i class="nav-icon fas fa-chart-line"></i>
                    <span>Analytics</span>
                </button>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
        <div class="top-bar">
            <h1 class="page-title">Chat Assistant</h1>
            <div class="top-bar-actions">
                <button id="logout-btn" class="logout-btn" style="background: var(--accent-danger); color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 14px;">
                    <i class="fas fa-sign-out-alt"></i> Déconnexion
                </button>
            </div>
        </div>            <!-- Chat Page -->
            <div id="chat-page" class="content-page active">
                <div class="chat-container">
                    <div class="messages-area" id="messages">
                        <!-- Welcome Screen -->
                        <div class="welcome-screen" id="welcome">
                            <div class="welcome-icon">
                                <i class="fas fa-robot"></i>
                            </div>
                            <h2 class="welcome-title">Bonjour ! 👋</h2>
                            <p class="welcome-subtitle">
                                Je suis votre agent IA autonome. Je peux exécuter des actions réelles sur vos workflows n8n, déploiements Coolify, et bases de données Baserow.
                                Quelle mission souhaitez-vous me confier aujourd'hui ?
                            </p>
                            <div class="quick-actions">
                                <div class="quick-action" onclick="sendQuickMessage('Quelles sont tes capacités d\'agent autonome ? Peux-tu vraiment exécuter des actions sur n8n, Coolify et Baserow ?')">
                                    <div class="quick-action-icon">
                                        <i class="fas fa-magic"></i>
                                    </div>
                                    <div class="quick-action-title">Mes capacités d'agent</div>
                                    <div class="quick-action-desc">Découvrez mes actions autonomes</div>
                                </div>
                                <div class="quick-action" onclick="sendQuickMessage('Crée-moi un nouveau workflow n8n pour automatiser une tâche')">
                                    <div class="quick-action-icon">
                                        <i class="fas fa-code"></i>
                                    </div>
                                    <div class="quick-action-title">Créer un workflow</div>
                                    <div class="quick-action-desc">Automatisation n8n sur mesure</div>
                                </div>
                                <div class="quick-action" onclick="sendQuickMessage('Vérifie l\'état de mes déploiements Coolify et déploie si nécessaire')">
                                    <div class="quick-action-icon">
                                        <i class="fas fa-rocket"></i>
                                    </div>
                                    <div class="quick-action-title">Gérer les déploiements</div>
                                    <div class="quick-action-desc">Actions Coolify automatiques</div>
                                </div>
                                <div class="quick-action" onclick="sendQuickMessage('Synchronise et organise mes données Baserow selon mes règles métier')">
                                    <div class="quick-action-icon">
                                        <i class="fas fa-database"></i>
                                    </div>
                                    <div class="quick-action-title">Organiser les données</div>
                                    <div class="quick-action-desc">Gestion Baserow intelligente</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="input-area">
                        <div class="input-container">
                            <div class="model-selector">
                                <span class="model-label">Modèle :</span>
                                <select id="modelSelect" class="model-select" title="Sélectionnez un modèle IA">
                                    <option value="gpt-4o-mini">GPT-4o Mini (OpenAI)</option>
                                    <option value="grok-beta">Grok Beta (xAI)</option>
                                    <option value="claude-3.5-sonnet">Claude 3.5 Sonnet (Anthropic)</option>
                                    <option value="gemini-2.0-flash">Gemini 2.0 Flash (Google)</option>
                                </select>
                            </div>
                            <textarea 
                                id="messageInput" 
                                class="message-input" 
                                placeholder="Tapez votre message..."
                                rows="1"
                                title="Zone de saisie de message"
                            ></textarea>
                            <button id="sendBtn" class="send-btn" title="Envoyer le message">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                            
                            <div id="typingIndicator" class="typing-indicator">
                                <div class="typing-dots">
                                    <div class="typing-dot"></div>
                                    <div class="typing-dot"></div>
                                    <div class="typing-dot"></div>
                                </div>
                                <span>L'assistant réfléchit...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Models Page -->
            <div id="models-page" class="content-page">
                <div class="page-header">
                    <h2>🧠 Modèles IA</h2>
                    <p>Gestion des modèles d'intelligence artificielle</p>
                </div>
                
                <div class="cards-grid">
                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-bolt"></i>
                            </div>
                            <div>
                                <h3 class="card-title">GPT-4o Mini</h3>
                                <p class="card-subtitle">OpenAI • 128K contexte</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Rapide et efficace pour la plupart des tâches. Excellent équilibre entre performance et coût.</p>
                            <div class="model-status status-active">
                                <div class="status-dot"></div>
                                <span>Actif</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-code"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Grok Beta</h3>
                                <p class="card-subtitle">xAI via OpenRouter • 128K contexte</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Spécialisé dans le code et l'analyse technique. Comprend le contexte et l'humour.</p>
                            <div class="model-status status-demo">
                                <div class="status-dot"></div>
                                <span>Mode démo</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-brain"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Claude 3.5 Sonnet</h3>
                                <p class="card-subtitle">Anthropic • 200K contexte</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Excellent pour l'analyse complexe et la créativité. Très bon en raisonnement logique.</p>
                            <div class="model-status status-active">
                                <div class="status-dot"></div>
                                <span>Actif</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-rocket"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Gemini 2.0 Flash</h3>
                                <p class="card-subtitle">Google AI • 1M contexte</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Très rapide, bon pour les réponses courtes et les tâches simples. Contexte très large.</p>
                            <div class="model-status status-active">
                                <div class="status-dot"></div>
                                <span>Actif</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Instructions Page -->
            <div id="instructions-page" class="content-page">
                <div class="page-header">
                    <h2>📖 Instructions & Configuration</h2>
                    <p>Guide complet pour configurer et utiliser Agent Skeleton OSS</p>
                </div>
                
                <div class="cards-grid">
                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-key"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Configuration OpenRouter</h3>
                                <p class="card-subtitle">API unifiée pour tous les modèles</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>🎯 Solution recommandée : OpenRouter</strong></p>
                            <p>• Une seule clé API pour tous les modèles IA</p>
                            <p>• Accès à GPT-4o, Claude 3.5, Gemini 2.0, Grok</p>
                            <p>• Facturation transparente et unifiée</p>
                            
                            <p style="margin-top: 16px;"><strong>Configuration :</strong></p>
                            <p>1. Allez sur <a href="https://openrouter.ai/keys" target="_blank" style="color: var(--accent-primary);">openrouter.ai/keys</a></p>
                            <p>2. Créez un compte et générez une clé API</p>
                            <p>3. Ajoutez des crédits à votre compte</p>
                            <p>4. Variable Coolify: <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">OPENROUTER_API_KEY=sk-or-v1-votre-cle</code></p>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon integration">
                                <i class="fas fa-brain"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Modèles Disponibles</h3>
                                <p class="card-subtitle">Via OpenRouter</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>4 modèles IA premium :</strong></p>
                            <p>🚀 <strong>GPT-4o Mini</strong> (openai/gpt-4o-mini)</p>
                            <p>• Rapide et économique, excellent pour la plupart des tâches</p>
                            
                            <p style="margin-top: 12px;">🧠 <strong>Claude 3.5 Sonnet</strong> (anthropic/claude-3.5-sonnet)</p>
                            <p>• Excellence en analyse et raisonnement complexe</p>
                            
                            <p style="margin-top: 12px;">💎 <strong>Gemini 2.0 Flash</strong> (google/gemini-2.0-flash-exp)</p>
                            <p>• Ultra-rapide avec contexte très étendu (1M tokens)</p>
                            
                            <p style="margin-top: 12px;">⚡ <strong>Grok Beta</strong> (x-ai/grok-beta)</p>
                            <p>• Spécialisé code & humour, perspective unique</p>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon workflow">
                                <i class="fas fa-server"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Déploiement Coolify</h3>
                                <p class="card-subtitle">Configuration production</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>Variables d'environnement Coolify :</strong></p>
                            <p>1. Allez dans votre projet Coolify</p>
                            <p>2. Section "Variables d'environnement"</p>
                            <p>3. Ajoutez chaque clé API</p>
                            <p>4. Marquez comme "secret" 🔒</p>
                            <p>5. Redéployez l'application</p>
                            
                            <div style="background: rgba(16, 185, 129, 0.1); border: 1px solid var(--accent-success); border-radius: 6px; padding: 12px; margin-top: 12px;">
                                <strong style="color: var(--accent-success);">💡 Tip :</strong> Une seule clé API suffit pour activer le mode complet !
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-cogs"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Utilisation Avancée</h3>
                                <p class="card-subtitle">Workflows & Intégrations</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>Workflows n8n :</strong></p>
                            <p>• Agent Chat Automation : Automatise les réponses</p>
                            <p>• Baserow Sync : Sauvegarde des conversations</p>
                            <p>• Deploy Monitor : Surveillance système</p>
                            
                            <p style="margin-top: 16px;"><strong>Personnalisation :</strong></p>
                            <p>• Variables de marque : <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">BRAND_NAME</code></p>
                            <p>• Ton de l'IA : <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">BRAND_TONE</code></p>
                            <p>• Expertise : <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">EXPERTISE_AREAS</code></p>
                            <p>• Langue : <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">RESPONSE_LANGUAGE</code></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Integrations Page -->
            <div id="integrations-page" class="content-page">
                <div class="page-header">
                    <h2>🔌 Intégrations API</h2>
                    <p>Configuration des APIs et services externes</p>
                    <div style="margin-top: 20px; display: flex; gap: 12px; justify-content: center;">
                        <button id="checkApiStatus" class="quick-action" style="padding: 12px 20px; background: var(--bg-card); border: 1px solid var(--border-color); border-radius: 8px; color: var(--text-primary); cursor: pointer; display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-sync"></i>
                            <span>Vérifier le statut</span>
                        </button>
                        <button id="showApiInstructions" class="quick-action" style="padding: 12px 20px; background: var(--accent-primary); border: 1px solid var(--accent-primary); border-radius: 8px; color: white; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-plus"></i>
                            <span>Configurer APIs</span>
                        </button>
                    </div>
                </div>
                
                <div class="cards-grid">
                    <div class="info-card" id="openrouter-main-card">
                        <div class="card-header">
                            <div class="card-icon integration">
                                <i class="fas fa-route"></i>
                            </div>
                            <div>
                                <h3 class="card-title">OpenRouter (API Unifiée)</h3>
                                <p class="card-subtitle">Accès à tous les modèles IA</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Provider principal pour tous les modèles : GPT-4o Mini, Claude 3.5, Gemini 2.0, Grok Beta</p>
                            <div class="model-status status-demo" id="openrouter-main-status">
                                <div class="status-dot"></div>
                                <span>Vérification...</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card" id="models-overview-card">
                        <div class="card-header">
                            <div class="card-icon model">
                                <i class="fas fa-brain"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Modèles Disponibles</h3>
                                <p class="card-subtitle">Via OpenRouter</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>4 modèles IA premium :</strong></p>
                            <p>🚀 <strong>GPT-4o Mini</strong> - openai/gpt-4o-mini</p>
                            <p>🧠 <strong>Claude 3.5 Sonnet</strong> - anthropic/claude-3.5-sonnet</p>
                            <p>💎 <strong>Gemini 2.0 Flash</strong> - google/gemini-2.0-flash-exp</p>
                            <p>⚡ <strong>Grok Beta</strong> - x-ai/grok-beta</p>
                        </div>
                    </div>

                    <div class="info-card" id="configuration-card">
                        <div class="card-header">
                            <div class="card-icon workflow">
                                <i class="fas fa-cog"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Configuration Simple</h3>
                                <p class="card-subtitle">Une seule clé pour tout</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>Avantages OpenRouter :</strong></p>
                            <p>• <strong>Une seule clé API</strong> pour tous les modèles</p>
                            <p>• <strong>Facturation unifiée</strong> et transparente</p>
                            <p>• <strong>Failover automatique</strong> entre providers</p>
                            <p>• <strong>Rate limiting</strong> et monitoring intégrés</p>
                            
                            <div style="background: rgba(16, 185, 129, 0.1); border: 1px solid var(--accent-success); border-radius: 6px; padding: 12px; margin-top: 12px;">
                                <strong style="color: var(--accent-success);">💡 Configuration Coolify :</strong><br>
                                <code style="background: var(--bg-tertiary); padding: 2px 6px; border-radius: 4px;">OPENROUTER_API_KEY=sk-or-v1-votre-cle</code>
                            </div>
                        </div>
                    </div>

                    <div class="info-card" id="pricing-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-dollar-sign"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Tarification</h3>
                                <p class="card-subtitle">Pay-per-use optimisé</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p><strong>Coûts par modèle :</strong></p>
                            <p>💰 <strong>GPT-4o Mini :</strong> Le plus économique</p>
                            <p>💰💰 <strong>Claude 3.5 :</strong> Premium, excellent rapport qualité/prix</p>
                            <p>💰 <strong>Gemini 2.0 :</strong> Très rapide, contexte large</p>
                            <p>💰💰 <strong>Grok Beta :</strong> Spécialisé, humour & code</p>
                            
                            <p style="margin-top: 12px; font-size: 13px; color: var(--text-secondary);">
                                Voir les tarifs détaillés sur <a href="https://openrouter.ai/docs#models" target="_blank" style="color: var(--accent-primary);">openrouter.ai/docs</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Workflows Page -->
            <div id="workflows-page" class="content-page">
                <div class="page-header">
                    <h2>🔄 Workflows n8n</h2>
                    <p>Automatisations et workflows</p>
                </div>
                
                <div class="cards-grid">
                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon workflow">
                                <i class="fas fa-comments"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Agent Chat Automation</h3>
                                <p class="card-subtitle">Workflow principal</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Automatisation complète du chat avec gestion des réponses IA et logging des conversations.</p>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Traitement des messages</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Routing vers les modèles IA</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Sauvegarde Baserow</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon workflow">
                                <i class="fas fa-database"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Baserow Sync</h3>
                                <p class="card-subtitle">Synchronisation données</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Synchronisation automatique des conversations et métriques avec la base de données Baserow.</p>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Export conversations</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Calcul métriques</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Backup quotidien</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon workflow">
                                <i class="fas fa-chart-line"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Deploy Monitor</h3>
                                <p class="card-subtitle">Surveillance déploiements</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <p>Monitoring des déploiements Coolify avec alertes automatiques et health checks.</p>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Health check API</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Alertes Discord</span>
                            </div>
                            <div class="workflow-item">
                                <div class="workflow-status"></div>
                                <span>Logs centralisés</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics Page -->
            <div id="analytics-page" class="content-page">
                <div class="page-header">
                    <h2>📊 Analytics</h2>
                    <p>Statistiques et métriques</p>
                </div>
                
                <div class="cards-grid">
                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-comment-dots"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Messages</h3>
                                <p class="card-subtitle">Activité conversationnelle</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">42</div>
                            <div class="metric-label">Messages aujourd'hui</div>
                            <p style="margin-top: 12px; font-size: 13px;">+15% par rapport à hier</p>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Performance</h3>
                                <p class="card-subtitle">Temps de réponse</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">1.2s</div>
                            <div class="metric-label">Temps moyen</div>
                            <p style="margin-top: 12px; font-size: 13px;">-0.3s par rapport à la semaine dernière</p>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-thumbs-up"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Satisfaction</h3>
                                <p class="card-subtitle">Note utilisateurs</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">94%</div>
                            <div class="metric-label">Taux de satisfaction</div>
                            <p style="margin-top: 12px; font-size: 13px;">Basé sur 156 évaluations</p>
                        </div>
                    </div>

                    <div class="info-card">
                        <div class="card-header">
                            <div class="card-icon analytics">
                                <i class="fas fa-trophy"></i>
                            </div>
                            <div>
                                <h3 class="card-title">Modèle populaire</h3>
                                <p class="card-subtitle">Utilisation par modèle</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="metric-value">Claude 3.5</div>
                            <div class="metric-label">58% des conversations</div>
                            <p style="margin-top: 12px; font-size: 13px;">GPT-4o Mini: 25%, Gemini: 12%, Grok: 5%</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        console.log('🚀 Initialisation de l\'application...');

        // Variables globales
        let conversationId = null;
        let currentPage = 'chat';

        // Fonction de navigation
        function navigateToPage(targetPage) {
            console.log(`🎯 Navigation vers: ${targetPage}`);
            
            // Cacher toutes les pages
            document.querySelectorAll('.content-page').forEach(page => {
                page.classList.remove('active');
            });
            
            // Afficher la page cible
            const pageElement = document.getElementById(targetPage + '-page');
            if (pageElement) {
                pageElement.classList.add('active');
                currentPage = targetPage;
                console.log(`✅ Page affichée: ${targetPage}-page`);
                
                // Vérifier le statut des APIs si on navigue vers les intégrations
                if (targetPage === 'integrations') {
                    setTimeout(checkApiStatus, 500);
                }
            } else {
                console.error(`❌ Page introuvable: ${targetPage}-page`);
                return false;
            }
            
            // Mettre à jour les boutons de navigation
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
                if (item.dataset.page === targetPage) {
                    item.classList.add('active');
                    
                    // Mettre à jour le titre
                    const titleSpan = item.querySelector('span');
                    if (titleSpan) {
                        document.querySelector('.page-title').textContent = titleSpan.textContent;
                    }
                }
            });
            
            return true;
        }

        // Fonctions de chat
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');
            const messagesArea = document.getElementById('messages');
            const welcomeScreen = document.getElementById('welcome');
            const modelSelect = document.getElementById('modelSelect');
            const typingIndicator = document.getElementById('typingIndicator');

            if (!messageInput || !sendBtn || !messagesArea || !modelSelect) {
                console.error('❌ Éléments DOM manquants pour le chat');
                return;
            }

            const message = messageInput.value.trim();
            if (!message) return;

            // Disable input during processing
            messageInput.disabled = true;
            sendBtn.disabled = true;

            // Hide welcome screen
            if (welcomeScreen) {
                welcomeScreen.style.display = 'none';
            }

            // Add user message
            addMessage(message, 'user');
            messageInput.value = '';
            
            // Show typing indicator
            if (typingIndicator) {
                typingIndicator.style.display = 'flex';
                messagesArea.scrollTop = messagesArea.scrollHeight;
            }
            
            try {
                const requestData = {
                    message: message,
                    conversationId: conversationId,
                    model: modelSelect.value
                };
                
                console.log('📤 Envoi de données:', requestData);
                
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                const data = await response.json();
                console.log('📄 Données reçues:', data);
                
                // Hide typing indicator
                if (typingIndicator) {
                    typingIndicator.style.display = 'none';
                }

                if (response.ok) {
                    conversationId = data.conversationId;
                    
                    // Ajouter un indicateur simple en mode démo
                    if (data.demo_mode && !document.getElementById('demo-notice')) {
                        const demoNotice = document.createElement('div');
                        demoNotice.id = 'demo-notice';
                        demoNotice.style.cssText = `
                            background: rgba(245, 158, 11, 0.1);
                            border: 1px solid rgba(245, 158, 11, 0.3);
                            color: var(--accent-warning);
                            padding: 8px 12px;
                            border-radius: 6px;
                            font-size: 12px;
                            margin: 8px 0;
                            text-align: center;
                        `;
                        demoNotice.textContent = '💡 Mode démo - Configurez vos clés API pour l\'IA complète';
                        messagesArea.appendChild(demoNotice);
                    }
                    
                    addMessage(data.response, 'assistant');
                } else {
                    // Vérifier si c'est une erreur d'authentification
                    if (data.needAuth) {
                        addMessage('🔐 Session expirée. Redirection vers la connexion...', 'assistant', true);
                        setTimeout(() => {
                            window.location.href = '/login';
                        }, 2000);
                    } else {
                        addMessage('❌ Erreur: ' + (data.error || 'Une erreur est survenue'), 'assistant', true);
                    }
                }
            } catch (error) {
                if (typingIndicator) {
                    typingIndicator.style.display = 'none';
                }
                console.error('Erreur de communication:', error);
                addMessage('❌ Erreur de connexion. Vérifiez votre connexion et réessayez.', 'assistant', true);
            }

            // Re-enable input
            messageInput.disabled = false;
            sendBtn.disabled = false;
            messageInput.focus();
        }

        function addMessage(content, type, isError = false) {
            const messagesArea = document.getElementById('messages');
            if (!messagesArea) return;

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            if (isError) {
                messageContent.style.background = 'var(--accent-danger)';
                messageContent.style.color = 'white';
            }
            
            // Améliorer l'affichage des réponses AI
            if (type === 'assistant' && !isError) {
                // Ajouter l'icône du modèle utilisé uniquement
                const modelSelect = document.getElementById('modelSelect');
                if (modelSelect) {
                    const selectedModel = modelSelect.options[modelSelect.selectedIndex].text;
                    const modelIndicator = document.createElement('div');
                    modelIndicator.style.cssText = `
                        font-size: 11px;
                        color: var(--text-muted);
                        margin-bottom: 8px;
                        display: flex;
                        align-items: center;
                        gap: 4px;
                    `;
                    
                    let modelIcon = '🤖';
                    if (selectedModel.includes('GPT')) modelIcon = '🚀';
                    else if (selectedModel.includes('Claude')) modelIcon = '🧠';
                    else if (selectedModel.includes('Gemini')) modelIcon = '💎';
                    else if (selectedModel.includes('Grok')) modelIcon = '⚡';
                    
                    modelIndicator.innerHTML = `${modelIcon} ${selectedModel}`;
                    messageContent.appendChild(modelIndicator);
                }
            }
            
            // Créer le contenu principal du message
            const mainContent = document.createElement('div');
            mainContent.innerHTML = content;
            messageContent.appendChild(mainContent);
            
            messageDiv.appendChild(messageContent);
            messagesArea.appendChild(messageDiv);
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        // Fonctions pour la gestion des intégrations API
        async function checkApiStatus() {
            console.log('🔍 Vérification du statut OpenRouter...');
            
            try {
                const response = await fetch('/api/keys-status');
                
                if (!response.ok) {
                    if (response.status === 401) {
                        console.log('Session expirée, redirection...');
                        window.location.href = '/login';
                        return;
                    }
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const status = await response.json();
                
                console.log('📊 Statut OpenRouter:', status);
                
                // Mettre à jour la carte principale
                const mainStatus = document.getElementById('openrouter-main-status');
                if (mainStatus) {
                    mainStatus.className = 'model-status';
                    if (status.all_models_available) {
                        mainStatus.classList.add('status-active');
                        mainStatus.innerHTML = '<div class="status-dot"></div><span>✅ Tous modèles disponibles</span>';
                    } else {
                        mainStatus.classList.add('status-inactive');
                        mainStatus.innerHTML = '<div class="status-dot"></div><span>❌ Clé OpenRouter requise</span>';
                    }
                }
                
                // Afficher un message global
                if (status.demo_mode) {
                    showApiMessage('⚠️ Mode démo - Ajoutez votre clé OpenRouter pour activer tous les modèles IA', 'warning');
                } else {
                    showApiMessage('✅ OpenRouter connecté - Tous les modèles IA sont disponibles', 'success');
                }
                
            } catch (error) {
                console.error('❌ Erreur lors de la vérification:', error);
                showApiMessage('❌ Erreur lors de la vérification du statut OpenRouter', 'error');
            }
        }

        function updateApiCard(provider, isActive) {
            const statusElement = document.getElementById(`${provider}-status`);
            if (!statusElement) return;
            
            // Nettoyer les classes existantes
            statusElement.className = 'model-status';
            
            if (isActive) {
                statusElement.classList.add('status-active');
                statusElement.innerHTML = '<div class="status-dot"></div><span>Connecté</span>';
            } else {
                statusElement.classList.add('status-inactive');
                statusElement.innerHTML = '<div class="status-dot"></div><span>Non configuré</span>';
            }
        }

        function showApiMessage(message, type) {
            // Chercher ou créer l'élément de message
            let messageElement = document.getElementById('api-message');
            if (!messageElement) {
                messageElement = document.createElement('div');
                messageElement.id = 'api-message';
                const pageHeader = document.querySelector('#integrations-page .page-header');
                pageHeader.appendChild(messageElement);
            }
            
            // Styles selon le type
            let bgColor, textColor;
            switch (type) {
                case 'success':
                    bgColor = 'rgba(16, 185, 129, 0.1)';
                    textColor = 'var(--accent-success)';
                    break;
                case 'warning':
                    bgColor = 'rgba(245, 158, 11, 0.1)';
                    textColor = 'var(--accent-warning)';
                    break;
                case 'error':
                    bgColor = 'rgba(239, 68, 68, 0.1)';
                    textColor = 'var(--accent-danger)';
                    break;
            }
            
            messageElement.style.cssText = `
                background: ${bgColor};
                border: 1px solid ${textColor}33;
                color: ${textColor};
                padding: 12px 16px;
                border-radius: 8px;
                font-size: 14px;
                margin-top: 16px;
                text-align: center;
                animation: fadeIn 0.3s ease;
            `;
            
            messageElement.textContent = message;
            
            // Disparition automatique après 5 secondes
            setTimeout(() => {
                if (messageElement) {
                    messageElement.style.animation = 'fadeOut 0.3s ease';
                    setTimeout(() => messageElement.remove(), 300);
                }
            }, 5000);
        }

        function showApiInstructions() {
            const instructions = `
🔑 **Configuration OpenRouter (API Unifiée)**

**Pourquoi OpenRouter ?**
✅ Une seule clé pour TOUS les modèles IA
✅ Accès à GPT-4o, Claude 3.5, Gemini 2.0, Grok
✅ Facturation transparente et unifiée
✅ Failover automatique entre providers

**Configuration :**
1. Allez sur https://openrouter.ai/keys
2. Créez un compte et générez une clé API
3. Ajoutez des crédits à votre compte OpenRouter
4. Variable Coolify : OPENROUTER_API_KEY=sk-or-v1-votre-cle

**Modèles disponibles via OpenRouter :**
• openai/gpt-4o-mini (GPT-4o Mini)
• anthropic/claude-3.5-sonnet (Claude 3.5)
• google/gemini-2.0-flash-exp (Gemini 2.0)
• x-ai/grok-beta (Grok Beta)

**Variables Coolify nécessaires :**
OPENROUTER_API_KEY=sk-or-v1-votre-cle-openrouter

**C'est tout ! 🎉**
Une seule clé = Accès à tous les meilleurs modèles IA
            `.trim();
            
            // Créer une modal simple
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                animation: fadeIn 0.3s ease;
            `;
            
            const content = document.createElement('div');
            content.style.cssText = `
                background: var(--bg-card);
                border: 1px solid var(--border-color);
                border-radius: 12px;
                padding: 24px;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
                margin: 20px;
                position: relative;
            `;
            
            content.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <h3 style="margin: 0; color: var(--text-primary);">Configuration OpenRouter</h3>
                    <button onclick="this.closest('div[style*=\"position: fixed\"]').remove()" style="background: none; border: none; color: var(--text-secondary); font-size: 20px; cursor: pointer;">×</button>
                </div>
                <pre style="white-space: pre-wrap; font-family: inherit; color: var(--text-secondary); line-height: 1.6;">${instructions}</pre>
                <div style="margin-top: 20px; text-align: center;">
                    <button onclick="checkApiStatus(); this.closest('div[style*=\"position: fixed\"]').remove();" style="background: var(--accent-primary); color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer;">
                        Vérifier après configuration
                    </button>
                </div>
            `;
            
            modal.appendChild(content);
            document.body.appendChild(modal);
        }

        function sendQuickMessage(message) {
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.value = message;
                sendMessage();
            }
        }

        // Fonction de déconnexion
        async function logout() {
            try {
                const response = await fetch('/api/auth/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    window.location.href = '/login';
                } else {
                    console.error('Erreur lors de la déconnexion');
                    // Rediriger quand même vers login
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Erreur de déconnexion:', error);
                window.location.href = '/login';
            }
        }

        // Initialisation quand le DOM est chargé
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🎉 DOM chargé, initialisation...');
            
            // Configurer les boutons de navigation
            const navItems = document.querySelectorAll('.nav-item');
            console.log(`🔍 ${navItems.length} boutons de navigation trouvés`);
            
            navItems.forEach((item, index) => {
                const page = item.dataset.page;
                console.log(`Bouton ${index}: ${page}`);
                
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log(`🖱️ Clic détecté sur: ${page}`);
                    navigateToPage(page);
                });
            });
            
            // Configurer le chat
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (sendBtn) {
                sendBtn.addEventListener('click', sendMessage);
                console.log('✅ Event listener ajouté pour sendBtn');
            }
            
            if (messageInput) {
                messageInput.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });

                messageInput.addEventListener('input', function() {
                    this.style.height = '50px';
                    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
                });
                console.log('✅ Event listeners ajoutés pour messageInput');
            }
            
            // Configurer les boutons des intégrations API
            const checkApiBtn = document.getElementById('checkApiStatus');
            const showInstructionsBtn = document.getElementById('showApiInstructions');
            
            if (checkApiBtn) {
                checkApiBtn.addEventListener('click', checkApiStatus);
                console.log('✅ Event listener ajouté pour checkApiStatus');
            }
            
            if (showInstructionsBtn) {
                showInstructionsBtn.addEventListener('click', showApiInstructions);
                console.log('✅ Event listener ajouté pour showApiInstructions');
            }
            
            // Vérification automatique du statut au chargement de la page intégrations
            setTimeout(() => {
                if (currentPage === 'integrations') {
                    checkApiStatus();
                }
            }, 1000);
            
            // Bouton de déconnexion
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', logout);
                console.log('✅ Event listener ajouté pour logout');
            }
            
            // Exposer les fonctions globalement
            window.navigateToPage = navigateToPage;
            window.sendQuickMessage = sendQuickMessage;
            
            console.log('✅ Initialisation terminée');
        });
        
        console.log('📝 Script chargé complètement');
    </script>
</body>
</html>