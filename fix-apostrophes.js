#!/usr/bin/env node

/**
 * R√âPARATION AUTOMATIQUE DES APOSTROPHES
 * 
 * Ce script va trouver et √©chapper TOUTES les apostrophes non √©chapp√©es
 * dans les template literals du dashboard
 */

const fs = require('fs');
const path = require('path');

console.log('üîß ========================================');
console.log('üîß R√âPARATION AUTOMATIQUE DES APOSTROPHES');
console.log('üîß ========================================\n');

const indexPath = path.join(__dirname, 'packages', 'orchestrator', 'src', 'index.js');

console.log(`üìÅ Fichier: ${indexPath}\n`);

// Lire le fichier
let content = fs.readFileSync(indexPath, 'utf-8');
const originalContent = content;

console.log('üîç Recherche des apostrophes non √©chapp√©es...\n');

// Fonction pour √©chapper les apostrophes dans une cha√Æne
function escapeApostrophes(str) {
    // Ne pas toucher aux apostrophes d√©j√† √©chapp√©es
    // √âchapper les apostrophes qui ne sont PAS pr√©c√©d√©es d'un backslash
    return str.replace(/(?<!\\)'/g, "\\'");
}

// Trouver tous les template literals et les corriger
let fixCount = 0;
const templateLiteralRegex = /`([^`]*)`/g;

content = content.replace(templateLiteralRegex, (match, innerContent) => {
    // Compter les apostrophes non √©chapp√©es
    const unescapedCount = (innerContent.match(/(?<!\\)'/g) || []).length;
    
    if (unescapedCount > 0) {
        fixCount++;
        const fixed = '`' + escapeApostrophes(innerContent) + '`';
        console.log(`‚úÖ Fix ${fixCount}: ${unescapedCount} apostrophe(s) √©chapp√©e(s)`);
        return fixed;
    }
    
    return match;
});

if (fixCount === 0) {
    console.log('‚úÖ Aucune apostrophe non √©chapp√©e trouv√©e !\n');
    console.log('ü§î Le probl√®me pourrait √™tre ailleurs. Suggestions :');
    console.log('   1. Vider compl√®tement le cache navigateur');
    console.log('   2. Tester en navigation priv√©e');
    console.log('   3. V√©rifier la console navigateur (F12)\n');
    process.exit(0);
}

// Sauvegarder le backup
const backupPath = path.join(__dirname, `index.js.backup-apostrophes.${Date.now()}`);
fs.writeFileSync(backupPath, originalContent);
console.log(`\nüì¶ Backup sauvegard√©: ${backupPath}`);

// √âcrire le fichier corrig√©
fs.writeFileSync(indexPath, content);
console.log(`‚úÖ Fichier corrig√© sauvegard√©: ${indexPath}\n`);

console.log('========================================');
console.log(`‚úÖ R√âPARATION TERMIN√âE : ${fixCount} template literal(s) corrig√©(s)`);
console.log('========================================\n');

console.log('üìù PROCHAINES √âTAPES :');
console.log('   1. Relancer le diagnostic: node diagnostic-dashboard.js');
console.log('   2. Si OK, tester localement le serveur');
console.log('   3. Git commit + push pour d√©ployer sur Coolify');
console.log('   4. Vider le cache navigateur ET tester\n');

process.exit(0);
