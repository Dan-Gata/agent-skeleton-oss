#!/bin/bash

# Script de v√©rification pour le d√©ploiement Coolify
# Usage: ./verify-deployment.sh

set -e

echo "üîç V√©rification de la configuration pour Coolify..."
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur de probl√®mes
ERRORS=0
WARNINGS=0

# V√©rifier les fichiers requis
echo "üìÅ V√©rification des fichiers requis..."

if [ -f "Dockerfile" ]; then
    echo -e "${GREEN}‚úÖ Dockerfile trouv√©${NC}"
else
    echo -e "${RED}‚ùå Dockerfile manquant${NC}"
    ERRORS=$((ERRORS + 1))
fi

if [ -f ".dockerignore" ]; then
    echo -e "${GREEN}‚úÖ .dockerignore trouv√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  .dockerignore manquant (recommand√©)${NC}"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úÖ package.json trouv√©${NC}"
else
    echo -e "${RED}‚ùå package.json manquant${NC}"
    ERRORS=$((ERRORS + 1))
fi

if [ -f "server.js" ]; then
    echo -e "${GREEN}‚úÖ server.js trouv√©${NC}"
else
    echo -e "${RED}‚ùå server.js manquant${NC}"
    ERRORS=$((ERRORS + 1))
fi

if [ -f "src/index.js" ]; then
    echo -e "${GREEN}‚úÖ src/index.js trouv√©${NC}"
else
    echo -e "${RED}‚ùå src/index.js manquant${NC}"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "üß™ Test de d√©marrage du serveur..."

# V√©rifier que node_modules existe
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}üì¶ Installation des d√©pendances...${NC}"
    npm install --production
fi

# Tester le d√©marrage du serveur
echo "üöÄ D√©marrage du serveur en arri√®re-plan..."
PORT=3000 node server.js > /tmp/server.log 2>&1 &
SERVER_PID=$!

# Attendre que le serveur d√©marre
sleep 3

# V√©rifier si le processus est toujours actif
if ps -p $SERVER_PID > /dev/null; then
    echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec succ√®s (PID: $SERVER_PID)${NC}"
    
    # Tester le health check
    echo "üè• Test du health check..."
    if curl -s -f http://localhost:3000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Health check fonctionne${NC}"
        
        # Afficher la r√©ponse
        echo "üìä R√©ponse du health check:"
        curl -s http://localhost:3000/health | jq '.' 2>/dev/null || curl -s http://localhost:3000/health
    else
        echo -e "${RED}‚ùå Health check √©choue${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    # Tester l'API principale
    echo ""
    echo "üåê Test de l'API principale..."
    if curl -s -f http://localhost:3000/ > /dev/null; then
        echo -e "${GREEN}‚úÖ API principale fonctionne${NC}"
    else
        echo -e "${RED}‚ùå API principale √©choue${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    # Arr√™ter le serveur
    kill $SERVER_PID 2>/dev/null || true
    wait $SERVER_PID 2>/dev/null || true
else
    echo -e "${RED}‚ùå Le serveur n'a pas d√©marr√©${NC}"
    echo "üìã Logs du serveur:"
    cat /tmp/server.log
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "üìã V√©rification du Dockerfile..."

# V√©rifier que le Dockerfile expose le port 3000
if grep -q "EXPOSE 3000" Dockerfile; then
    echo -e "${GREEN}‚úÖ Port 3000 expos√© dans le Dockerfile${NC}"
else
    echo -e "${RED}‚ùå Port 3000 non expos√© dans le Dockerfile${NC}"
    ERRORS=$((ERRORS + 1))
fi

# V√©rifier la commande CMD
if grep -q 'CMD \["node", "server.js"\]' Dockerfile; then
    echo -e "${GREEN}‚úÖ Commande de d√©marrage correcte${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Commande de d√©marrage non standard${NC}"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""
echo "================================"
echo "üìä R√âSUM√â DE LA V√âRIFICATION"
echo "================================"

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Pr√™t pour le d√©ploiement Coolify !${NC}"
    echo ""
    echo "üìù Prochaines √©tapes:"
    echo "1. Poussez le code sur GitHub"
    echo "2. Cr√©ez une nouvelle application dans Coolify"
    echo "3. S√©lectionnez Docker comme Build Pack"
    echo "4. Configurez le port 3000"
    echo "5. Ajoutez les variables d'environnement n√©cessaires"
    echo "6. D√©ployez !"
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS erreur(s) d√©tect√©e(s)${NC}"
    if [ $WARNINGS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS avertissement(s)${NC}"
    fi
    echo ""
    echo "Corrigez les erreurs avant de d√©ployer sur Coolify."
    exit 1
fi
